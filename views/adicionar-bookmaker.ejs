<!DOCTYPE html>
                    <html lang="pt-BR">
                    <head>
                      <meta charset="UTF-8">
                      <meta name="viewport" content="width=device-width, initial-scale=1.0">
                      <title>Adicionar Bookmaker - CRM</title>
                      <link rel="stylesheet" href="/css/styles.css">
                      <link rel="stylesheet" href="/css/tabs.css">
                    </head>
                    <body>
                      <div class="dashboard-container">
                        <header class="main-header">
                          <div class="logo">
                            <h1>CRM Sistema</h1>
                          </div>
                          <div class="user-info">
                            <span>Bem-vindo, <%= usuario.nome %></span>
                            <a href="/logout" class="btn btn-small">Sair</a>
                          </div>
                        </header>

                        <div class="dashboard-content">
                          <aside class="sidebar">
                            <nav>
                              <ul>
                                <li><a href="/dashboard">Dashboard</a></li>
                                <li class="active"><a href="/bookmakers">Bookmakers</a></li>
                                <li><a href="/users">Users</a></li>
                              </ul>
                            </nav>
                          </aside>

                          <main class="main-content">
                            <div class="page-header">
                              <h2>Adicionar Bookmaker</h2>
                            </div>

                            <% if (erro) { %>
                              <div class="alert alert-danger">
                                <%= erro %>
                              </div>
                            <% } %>

                            <div class="form-container">
                              <!-- Tab links -->
                              <div class="tab">
                                <button type="button" class="tab-link active" data-tab="bookmakerSettings">Bookmaker Settings</button>
                                <button type="button" class="tab-link" data-tab="bookmakerAccountSettings">Bookmaker Account Settings</button>
                                <button type="button" class="tab-link" data-tab="bookmakerDealSettings">Bookmaker Deal Settings</button>
                              </div>

                              <form action="/bookmakers/adicionar-bookmaker" method="POST" enctype="multipart/form-data">
                                <!-- Tab content -->
                                <div id="bookmakerSettings" class="tab-content" style="display:block;">
                                  <div class="form-group">
                                    <label for="groupId">Bookmaker Group:</label>
                                    <select id="groupId" name="groupId" required>
                                      <option value="">Selecione um grupo</option>
                                      <% groups.forEach(group => { %>
                                        <option value="<%= group.id %>"><%= group.nome %></option>
                                      <% }); %>
                                    </select>
                                  </div>

                                  <div class="form-group">
                                    <label for="status">Bookmaker Status:</label>
                                    <select id="status" name="status">
                                      <option value="active">Active</option>
                                      <option value="inactive">Inactive</option>
                                      <option value="suspended">Suspended</option>
                                    </select>
                                  </div>

                                  <div class="form-group">
                                    <label for="nome">Bookmaker Name:</label>
                                    <input type="text" id="nome" name="nome" required>
                                  </div>

                                  <div class="form-group">
                                    <label for="bookmakerLogo">Bookmaker Logo:</label>
                                    <input type="file" id="bookmakerLogo" name="bookmakerLogo" accept="image/*">
                                    <div class="logo-preview-container">
                                      <img id="logoPreview" class="logo-preview" src="#" alt="Logo Preview">
                                    </div>
                                  </div>

                                  <div class="form-group">
                                    <label for="affiliateUrl">Bookmaker Affiliate URL:</label>
                                    <input type="url" id="affiliateUrl" name="affiliateUrl">
                                  </div>

                                  <div class="form-group">
                                    <label for="geographies">Geographies:</label>
                                    <div class="country-multi-selector">
                                      <div class="country-search">
                                        <input type="text" id="countrySearch" placeholder="Search countries...">
                                      </div>
                                      <div class="selected-countries" id="selectedCountries"></div>
                                      <ul id="countryList" class="country-list"></ul>
                                      <input type="hidden" id="selectedCountriesData" name="selectedCountriesData">
                                    </div>
                                  </div>
                                </div>

                                <!-- Bookmaker Account Settings Tab -->
                                <div id="bookmakerAccountSettings" class="tab-content">
                                  <!-- Botão para adicionar conta -->
                                  <div class="add-account-section">
                                    <button type="button" id="addAccountButton" class="btn btn-success">Add Account</button>
                                  </div>

                                  <!-- Seção de detalhes da conta -->
                                  <div id="accountDetailsSection" style="display: none;">
                                    <h4>Account Details</h4>

                                    <div class="form-group">
                                      <div class="autofill-option">
                                        <label>Preencher automaticamente com dados do grupo:</label>
                                        <button type="button" id="autoFillFromGroup" class="btn btn-sm btn-info">Auto-preencher</button>
                                      </div>
                                    </div>

                                    <div class="form-group">
                                      <label for="ownerSelect">Owner:</label>
                                      <select id="ownerSelect" name="ownerSelect">
                                        <option value="">Select an Owner</option>
                                      </select>
                                    </div>

                                    <div class="form-group">
                                      <label for="accountStatus">Account Status:</label>
                                      <select id="accountStatus" name="accountStatus">
                                        <option value="active">Active</option>
                                        <option value="inactive">Inactive</option>
                                        <option value="suspended">Suspended</option>
                                      </select>
                                    </div>

                                    <div class="form-group">
                                      <label for="accountUsername">Username/Email:</label>
                                      <input type="text" id="accountUsername" name="accountUsername">
                                    </div>

                                    <div class="form-group">
                                      <label for="accountPassword">Password:</label>
                                      <input type="password" id="accountPassword" name="accountPassword">
                                    </div>

                                    <div class="form-group">
                                      <label for="associatedGeographies">Associated Geographies:</label>
                                      <div class="country-multi-selector">
                                        <div class="country-search">
                                          <input type="text" id="accountCountrySearch" placeholder="Search countries...">
                                        </div>
                                        <div class="selected-countries" id="accountSelectedCountries"></div>
                                        <ul id="accountCountryList" class="country-list"></ul>
                                      </div>
                                    </div>

                                    <div class="form-actions">
                                      <button type="button" id="saveAccountButton" class="btn btn-success">Save Account</button>
                                    </div>
                                  </div>

                                  <!-- Seção para exibir as contas salvas -->
                                  <div id="savedAccountsSection" style="display: none;" class="saved-accounts-section">
                                    <h4>Saved Accounts</h4>
                                    <div id="accountsList" class="accounts-list"></div>
                                  </div>

                                  <!-- Input hidden para armazenar os dados das contas em formato JSON -->
                                  <input type="hidden" id="savedBookmakerAccountsData" name="savedBookmakerAccountsData">
                                </div>

                                <!-- Bookmaker Deal Settings Tab -->
                                <div id="bookmakerDealSettings" class="tab-content">
                                  <div id="noDealAccounts" style="display: block;">
                                    <p class="alert alert-info">Por favor, adicione contas na aba "Bookmaker Account Settings" antes de configurar os deals.</p>
                                  </div>

                                  <div id="dealSettingsContainer" style="display: none;">
                                    <h4>Configuração de Deals por Conta</h4>

                                    <div class="account-deal-list" id="accountDealList">
                                      <!-- Aqui serão listadas as contas para configuração de deals -->
                                    </div>

                                    <!-- Modal para configuração de deal -->
                                    <div id="dealConfigModal" class="modal">
                                      <div class="modal-content">
                                        <span class="close-modal">&times;</span>
                                        <h4>Configurar Deal</h4>

                                        <div id="dealConfigSingleMode">
                                          <div class="form-group">
                                            <label for="dealType">Deal Type:</label>
                                            <select id="dealType" name="dealType">
                                              <option value="Rev Share">Rev Share</option>
                                              <option value="CPA">CPA</option>
                                              <option value="Hybrid">Hybrid</option>
                                              <option value="Flat Fee">Flat Fee</option>
                                              <option value="Other">Other</option>
                                            </select>
                                          </div>

                                          <div class="form-group">
                                            <label for="dealDescription">Deal Description:</label>
                                            <textarea id="dealDescription" name="dealDescription" rows="3"></textarea>
                                          </div>
                                        </div>

                                        <div id="dealConfigMultiMode" style="display: none;">
                                          <p>Configure deals por geografia:</p>
                                          <div class="geography-deals-container" id="geographyDealsContainer">
                                            <!-- Aqui serão listadas as geografias para configuração -->
                                          </div>
                                        </div>

                                        <div class="form-actions">
                                          <button type="button" id="toggleDealMode" class="btn btn-info">Configurar por Geografia</button>
                                          <button type="button" id="saveDealConfig" class="btn btn-success">Salvar</button>
                                        </div>
                                      </div>
                                    </div>
                                  </div>

                                  <!-- Input hidden para armazenar os dados dos deals em formato JSON -->
                                  <input type="hidden" id="savedBookmakerDealsData" name="savedBookmakerDealsData">
                                </div>

                                <div class="form-actions">
                                  <button type="submit" class="btn btn-primary">Salvar</button>
                                  <a href="/bookmakers" class="btn btn-secondary" style="flex: 1; text-align: center;">Cancelar</a>
                                </div>
                              </form>
                            </div>
                          </main>
                        </div>
                      </div>

                      <script src="/js/countries.js"></script>
                      <script src="/js/bookmaker.js"></script>
                      <script src="/js/bookmaker-deal-settings.js"></script>
                      <style>
                        .account-card {
                          background-color: #fff;
                          border: 1px solid #ddd;
                          border-radius: 6px;
                          padding: 15px;
                          width: 300px;
                          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                          position: relative;
                        }

                        .account-card h5 {
                          font-size: 16px;
                          margin-top: 0;
                          margin-bottom: 10px;
                          color: #28a745;
                          border-bottom: 1px solid #eee;
                          padding-bottom: 8px;
                        }

                        .account-delete-btn {
                          position: absolute;
                          top: 10px;
                          right: 10px;
                          background-color: #dc3545;
                          color: white;
                          border: none;
                          border-radius: 50%;
                          width: 25px;
                          height: 25px;
                          font-size: 14px;
                          display: flex;
                          align-items: center;
                          justify-content: center;
                          cursor: pointer;
                        }

                        .account-delete-btn:hover {
                          background-color: #c82333;
                        }

                        .account-countries {
                          display: flex;
                          flex-wrap: wrap;
                        }

                        .country-mini-badge {
                          margin-right: 5px;
                          margin-bottom: 5px;
                          padding: 5px 10px;
                          border: 1px solid #ccc;
                          border-radius: 4px;
                        }

                        /* Estilos para Deal Settings */
                        .account-deal-card {
                          background-color: #f5f5f5;
                          border: 1px solid #ddd;
                          border-radius: 6px;
                          padding: 15px;
                          margin-bottom: 15px;
                          position: relative;
                        }

                        .account-deal-card h5 {
                          margin-top: 0;
                          margin-bottom: 10px;
                          font-size: 16px;
                          border-bottom: 1px solid #eee;
                          padding-bottom: 8px;
                        }

                        .deal-status {
                          position: absolute;
                          top: 15px;
                          right: 15px;
                          padding: 4px 8px;
                          border-radius: 4px;
                          font-size: 12px;
                        }

                        .deal-status-configured {
                          background-color: #28a745;
                          color: white;
                        }

                        .deal-status-pending {
                          background-color: #ffc107;
                          color: #212529;
                        }

                        .configure-deal-btn {
                          background-color: #007bff;
                          color: white;
                          border: none;
                          padding: 6px 12px;
                          border-radius: 4px;
                          cursor: pointer;
                        }

                        .configure-deal-btn:hover {
                          background-color: #0069d9;
                        }

                        /* Estilos para Modal */
                        .modal {
                          display: none;
                          position: fixed;
                          z-index: 1000;
                          left: 0;
                          top: 0;
                          width: 100%;
                          height: 100%;
                          overflow: auto;
                          background-color: rgba(0,0,0,0.4);
                        }

                        .modal-content {
                          background-color: #fefefe;
                          margin: 10% auto;
                          padding: 20px;
                          border: 1px solid #888;
                          border-radius: 6px;
                          width: 80%;
                          max-width: 600px;
                          position: relative;
                        }

                        .close-modal {
                          color: #aaa;
                          position: absolute;
                          top: 10px;
                          right: 10px;
                          font-size: 28px;
                          font-weight: bold;
                          cursor: pointer;
                        }

                        .close-modal:hover {
                          color: black;
                        }

                        .geography-deal-item {
                          border: 1px solid #ddd;
                          padding: 10px;
                          margin-bottom: 10px;
                          border-radius: 4px;
                        }

                        .geography-flag-name {
                          display: flex;
                          align-items: center;
                          font-weight: bold;
                          margin-bottom: 10px;
                        }

                        .geography-flag-name .country-flag {
                          margin-right: 5px;
                        }
                      </style>

                      <script>
                        // Funcionalidade para Deal Settings
                        document.addEventListener('DOMContentLoaded', function() {
                          // Função para atualizar a interface de Deal Settings com base nas contas salvas
                          function updateDealSettingsInterface() {
                            const savedAccounts = JSON.parse(document.getElementById('savedBookmakerAccountsData').value || '[]');
                            const accountDealList = document.getElementById('accountDealList');
                            const noDealAccounts = document.getElementById('noDealAccounts');
                            const dealSettingsContainer = document.getElementById('dealSettingsContainer');

                            // Verificar se existem contas salvas
                            if (savedAccounts.length === 0) {
                              noDealAccounts.style.display = 'block';
                              dealSettingsContainer.style.display = 'none';
                              return;
                            }

                            // Mostrar container de deals e esconder mensagem
                            noDealAccounts.style.display = 'none';
                            dealSettingsContainer.style.display = 'block';

                            // Limpar lista atual
                            accountDealList.innerHTML = '';

                            // Para cada conta, criar um card para configuração de deal
                            savedAccounts.forEach((account, index) => {
                              const card = document.createElement('div');
                              card.className = 'account-deal-card';
                              card.dataset.accountIndex = index;

                              // Verificar se já existe um deal configurado para esta conta
                              const deals = JSON.parse(document.getElementById('savedBookmakerDealsData').value || '[]');
                              const accountDeal = deals.find(deal => deal.accountIndex === index);

                              let statusClass = accountDeal ? 'deal-status-configured' : 'deal-status-pending';
                              let statusText = accountDeal ? 'Configurado' : 'Pendente';

                              let countriesInfo = '';
                              if (account.countries && account.countries.length > 0) {
                                countriesInfo = `<p><strong>Geografias:</strong> ${account.countries.length} associadas</p>`;
                              } else {
                                countriesInfo = '<p><strong>Geografias:</strong> Nenhuma</p>';
                              }

                              card.innerHTML = `
                                <span class="deal-status ${statusClass}">${statusText}</span>
                                <h5>${account.owner}</h5>
                                <p><strong>Username:</strong> ${account.username}</p>
                                ${countriesInfo}
                                <button class="configure-deal-btn" data-account-index="${index}">Configurar Deal</button>
                              `;

                              accountDealList.appendChild(card);
                            });

                            // Adicionar eventos para botões de configuração
                            document.querySelectorAll('.configure-deal-btn').forEach(button => {
                              button.addEventListener('click', function(e) {
                                e.preventDefault(); // Impedir comportamento padrão do botão
                                const accountIndex = parseInt(this.dataset.accountIndex);
                                openDealConfigModal(accountIndex);
                              });
                            });
                          }

                          // Função para abrir modal de configuração de deal
                          function openDealConfigModal(accountIndex) {
                            const modal = document.getElementById('dealConfigModal');
                            const account = JSON.parse(document.getElementById('savedBookmakerAccountsData').value || '[]')[accountIndex];
                            const dealConfigSingleMode = document.getElementById('dealConfigSingleMode');
                            const dealConfigMultiMode = document.getElementById('dealConfigMultiMode');
                            const toggleDealModeBtn = document.getElementById('toggleDealMode');
                            const saveDealConfigBtn = document.getElementById('saveDealConfig');

                            // Armazenar o índice da conta no modal para uso posterior
                            modal.dataset.accountIndex = accountIndex;

                            // Verificar se a conta tem múltiplas geografias
                            const hasMultipleGeographies = account.countries && account.countries.length > 1;

                            // Se não tiver múltiplas geografias, desabilitar botão de toggle
                            toggleDealModeBtn.disabled = !hasMultipleGeographies;
                            toggleDealModeBtn.style.display = hasMultipleGeographies ? 'block' : 'none';

                            // Iniciar no modo single
                            dealConfigSingleMode.style.display = 'block';
                            dealConfigMultiMode.style.display = 'none';

                            // Resetar estado do modo e armazenar no modal
                            modal.dataset.isMultiMode = 'false';

                            // Carregar dados existentes se houver
                            const deals = JSON.parse(document.getElementById('savedBookmakerDealsData').value || '[]');
                            const existingDeal = deals.find(deal => deal.accountIndex === accountIndex);

                            if (existingDeal) {
                              if (existingDeal.isMultiGeography) {
                                // Se for multi-geografia, preencher o modo multi
                                isMultiMode = true;
                                dealConfigSingleMode.style.display = 'none';
                                dealConfigMultiMode.style.display = 'block';
                                toggleDealModeBtn.textContent = 'Configurar para Todos';

                                // Preencher dados para cada geografia
                                populateGeographyDeals(account.countries, existingDeal.geographyDeals);
                              } else {
                                // Se for single, preencher o modo single
                                document.getElementById('dealType').value = existingDeal.dealType;
                                document.getElementById('dealDescription').value = existingDeal.dealDescription;
                              }
                            }

                            // Mostrar modal
                            modal.style.display = 'block';

                            // Configurar evento para fechar o modal
                            document.querySelector('.close-modal').onclick = function() {
                              modal.style.display = 'none';
                            };

                            // Fechar modal clicando fora
                            window.onclick = function(event) {
                              if (event.target === modal) {
                                modal.style.display = 'none';
                              }
                            };

                            // Configurar toggle entre modos
                            toggleDealModeBtn.onclick = function(e) {
                              e.preventDefault(); // Prevenir comportamento padrão
                              const modal = document.getElementById('dealConfigModal');
                              const isMultiMode = modal.dataset.isMultiMode === 'true';

                              // Alternar o modo
                              modal.dataset.isMultiMode = isMultiMode ? 'false' : 'true';

                              if (modal.dataset.isMultiMode === 'true') {
                                dealConfigSingleMode.style.display = 'none';
                                dealConfigMultiMode.style.display = 'block';
                                this.textContent = 'Configurar para Todos';

                                // Preencher dados de geografia
                                populateGeographyDeals(account.countries, 
                                  existingDeal && existingDeal.isMultiGeography ? existingDeal.geographyDeals : null);
                              } else {
                                dealConfigSingleMode.style.display = 'block';
                                dealConfigMultiMode.style.display = 'none';
                                this.textContent = 'Configurar por Geografia';
                              }
                            };

                            // Configurar salvamento
                            saveDealConfigBtn.onclick = function(e) {
                              e.preventDefault(); // Prevenir comportamento padrão
                              const modal = document.getElementById('dealConfigModal');
                              const accountIndex = parseInt(modal.dataset.accountIndex);
                              const isMultiMode = modal.dataset.isMultiMode === 'true';
                              saveDealConfiguration(accountIndex, isMultiMode);
                            };
                          }

                          // Função para popular as configurações de geografia
                          function populateGeographyDeals(countries, existingGeographyDeals) {
                            const container = document.getElementById('geographyDealsContainer');
                            container.innerHTML = '';

                            countries.forEach((country, index) => {
                              const existingDeal = existingGeographyDeals ? 
                                existingGeographyDeals.find(deal => deal.countryCode === country.code) : null;

                              const dealType = existingDeal ? existingDeal.dealType : 'Rev Share';
                              const dealDescription = existingDeal ? existingDeal.dealDescription : '';

                              const item = document.createElement('div');
                              item.className = 'geography-deal-item';
                              item.dataset.countryCode = country.code;

                              item.innerHTML = `
                                <div class="geography-flag-name">
                                  <span class="country-flag">${country.flag}</span>
                                  <span>${country.name}</span>
                                </div>

                                <div class="form-group">
                                  <label>Deal Type:</label>
                                  <select class="geo-deal-type">
                                    <option value="Rev Share" ${dealType === 'Rev Share' ? 'selected' : ''}>Rev Share</option>
                                    <option value="CPA" ${dealType === 'CPA' ? 'selected' : ''}>CPA</option>
                                    <option value="Hybrid" ${dealType === 'Hybrid' ? 'selected' : ''}>Hybrid</option>
                                    <option value="Flat Fee" ${dealType === 'Flat Fee' ? 'selected' : ''}>Flat Fee</option>
                                    <option value="Other" ${dealType === 'Other' ? 'selected' : ''}>Other</option>
                                  </select>
                                </div>

                                <div class="form-group">
                                  <label>Deal Description:</label>
                                  <textarea class="geo-deal-description" rows="2">${dealDescription}</textarea>
                                </div>
                              `;

                              container.appendChild(item);
                            });
                          }

                          // Função para salvar configuração de deal
                          function saveDealConfiguration(accountIndex, isMultiMode) {
                            // Validar dados antes de salvar
                            if (!isMultiMode) {
                              const dealType = document.getElementById('dealType').value;
                              if (!dealType) {
                                alert('Por favor, selecione um tipo de deal');
                                return;
                              }
                            }

                            const deals = JSON.parse(document.getElementById('savedBookmakerDealsData').value || '[]');

                            // Remover deal existente se houver
                            const existingDealIndex = deals.findIndex(deal => deal.accountIndex === accountIndex);
                            if (existingDealIndex !== -1) {
                              deals.splice(existingDealIndex, 1);
                            }

                            // Criar novo deal
                            let newDeal = {
                              accountIndex: accountIndex,
                              isMultiGeography: isMultiMode
                            };

                            if (isMultiMode) {
                              // Coletar dados de deal por geografia
                              const geographyItems = document.querySelectorAll('.geography-deal-item');
                              const geographyDeals = [];

                              geographyItems.forEach(item => {
                                geographyDeals.push({
                                  countryCode: item.dataset.countryCode,
                                  dealType: item.querySelector('.geo-deal-type').value,
                                  dealDescription: item.querySelector('.geo-deal-description').value
                                });
                              });

                              newDeal.geographyDeals = geographyDeals;
                            } else {
                              // Coletar dados de deal geral
                              newDeal.dealType = document.getElementById('dealType').value;
                              newDeal.dealDescription = document.getElementById('dealDescription').value;
                            }

                            // Adicionar à lista de deals
                            deals.push(newDeal);

                            // Atualizar o input hidden
                            document.getElementById('savedBookmakerDealsData').value = JSON.stringify(deals);

                            // Fechar modal
                            document.getElementById('dealConfigModal').style.display = 'none';

                            // Atualizar interface
                            updateDealSettingsInterface();

                            alert('Deal configurado com sucesso!');
                          }

                          // Observar mudanças na aba de contas
                          const tabLinks = document.querySelectorAll('.tab-link');
                          tabLinks.forEach(tab => {
                            tab.addEventListener('click', function() {
                              if (this.dataset.tab === 'bookmakerDealSettings') {
                                updateDealSettingsInterface();
                              }
                            });
                          });

                          // Inicializar savedBookmakerDealsData se não existir
                          if (!document.getElementById('savedBookmakerDealsData').value) {
                            document.getElementById('savedBookmakerDealsData').value = JSON.stringify([]);
                          }

                          // Observar mudanças nas contas
                          const observer = new MutationObserver(function(mutations) {
                            updateDealSettingsInterface();
                          });

                          // Observar o container de contas salvas
                          const accountsList = document.getElementById('accountsList');
                          if (accountsList) {
                            observer.observe(accountsList, { childList: true });
                          }
                        });
                      </script>
                    </body>
                    </html>