
<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Adicionar Bookmaker - CRM</title>
  <link rel="stylesheet" href="/css/styles.css">
  <link rel="stylesheet" href="/css/tabs.css">
</head>
<body>
  <div class="dashboard-container">
    <header class="main-header">
      <div class="logo">
        <h1>CRM Sistema</h1>
      </div>
      <div class="user-info">
        <span>Bem-vindo, <%= usuario.nome %></span>
        <a href="/logout" class="btn btn-small">Sair</a>
      </div>
    </header>

    <div class="dashboard-content">
      <aside class="sidebar">
        <nav>
          <ul>
            <li><a href="/dashboard">Dashboard</a></li>
            <li class="active"><a href="/bookmakers">Bookmakers</a></li>
            <li><a href="/users">Users</a></li>
          </ul>
        </nav>
      </aside>

      <main class="main-content">
        <div class="page-header">
          <h2>Adicionar Bookmaker</h2>
        </div>

        <% if (erro) { %>
          <div class="alert alert-danger">
            <%= erro %>
          </div>
        <% } %>

        <div class="form-container">
          <!-- Tab links -->
          <div class="tab">
            <button class="tab-link active" data-tab="bookmakerSettings">Bookmaker Settings</button>
            <button class="tab-link" data-tab="bookmakerAccountSettings">Bookmaker Account Settings</button>
          </div>

          <form action="/bookmakers/adicionar-bookmaker" method="POST" enctype="multipart/form-data">
            <!-- Tab content -->
            <div id="bookmakerSettings" class="tab-content" style="display:block;">
              <div class="form-group">
                <label for="groupId">Bookmaker Group:</label>
                <select id="groupId" name="groupId" required>
                  <option value="">Selecione um grupo</option>
                  <% groups.forEach(group => { %>
                    <option value="<%= group.id %>"><%= group.nome %></option>
                  <% }); %>
                </select>
              </div>

              <div class="form-group">
                <label for="status">Bookmaker Status:</label>
                <select id="status" name="status">
                  <option value="active">Active</option>
                  <option value="inactive">Inactive</option>
                  <option value="suspended">Suspended</option>
                </select>
              </div>

              <div class="form-group">
                <label for="nome">Bookmaker Name:</label>
                <input type="text" id="nome" name="nome" required>
              </div>

              <div class="form-group">
                <label for="bookmakerLogo">Bookmaker Logo:</label>
                <input type="file" id="bookmakerLogo" name="bookmakerLogo" accept="image/*">
                <div class="logo-preview-container">
                  <img id="logoPreview" class="logo-preview" src="#" alt="Logo Preview">
                </div>
              </div>

              <div class="form-group">
                <label for="affiliateUrl">Bookmaker Affiliate URL:</label>
                <input type="url" id="affiliateUrl" name="affiliateUrl">
              </div>

              <div class="form-group">
                <label for="geographies">Geographies:</label>
                <div class="country-multi-selector">
                  <div class="country-search">
                    <input type="text" id="countrySearch" placeholder="Search countries...">
                  </div>
                  <div class="selected-countries" id="selectedCountries"></div>
                  <ul id="countryList" class="country-list"></ul>
                  <input type="hidden" id="selectedCountriesData" name="selectedCountriesData">
                </div>
              </div>
            </div>

            <!-- Bookmaker Account Settings Tab -->
            <div id="bookmakerAccountSettings" class="tab-content">
              <div id="addAccountButtonSection">
                <button type="button" id="addAccountButton" class="btn btn-success">Add Account</button>
              </div>

              <!-- Seção de detalhes da conta -->
              <div id="accountDetailsSection" style="display: none;">
                <h4>Account Details</h4>
                
                <div class="form-group">
                  <label for="ownerSelect">Owner:</label>
                  <select id="ownerSelect" name="ownerSelect">
                    <option value="">Select an Owner</option>
                  </select>
                </div>

                <div class="form-group">
                  <label for="accountStatus">Account Status:</label>
                  <select id="accountStatus" name="accountStatus">
                    <option value="active">Active</option>
                    <option value="inactive">Inactive</option>
                    <option value="suspended">Suspended</option>
                  </select>
                </div>

                <div class="form-group">
                  <label for="accountUsername">Username/Email:</label>
                  <input type="text" id="accountUsername" name="accountUsername">
                </div>

                <div class="form-group">
                  <label for="accountPassword">Password:</label>
                  <input type="password" id="accountPassword" name="accountPassword">
                </div>

                <div class="form-group">
                  <label for="associatedGeographies">Associated Geographies:</label>
                  <div class="selected-geography-container">
                    <div id="selectedGeographiesDisplay"></div>
                    <select id="associatedGeographies" name="associatedGeographies" multiple style="display:none;">
                      <!-- Será preenchido dinamicamente -->
                    </select>
                  </div>
                </div>

                <div class="form-actions billing-actions">
                  <button type="button" id="saveAccountButton" class="btn btn-success">Save Account</button>
                </div>
              </div>

              <!-- Seção para exibir as contas salvas -->
              <div id="savedAccountsSection" class="saved-accounts-section" style="display: none;">
                <h4>Saved Accounts</h4>
                <div id="accountsList" class="accounts-list"></div>
                <button type="button" id="addMoreAccountButton" class="btn btn-info">Add Another Account</button>
              </div>

              <!-- Input hidden para armazenar os dados das contas em formato JSON -->
              <input type="hidden" id="savedAccountsData" name="savedAccountsData">
            </div>

            <div class="form-actions">
              <a href="/bookmakers" class="btn btn-secondary">Cancelar</a>
              <button type="submit" class="btn btn-primary">Salvar</button>
            </div>
          </form>
        </div>
      </main>
    </div>
  </div>

  <script src="/js/countries.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Preview da imagem do logo
      const logoInput = document.getElementById('bookmakerLogo');
      const logoPreview = document.getElementById('logoPreview');
      
      if (logoInput) {
        logoInput.addEventListener('change', function() {
          const file = this.files[0];
          const preview = document.getElementById('logoPreview');

          if (file) {
            const reader = new FileReader();

            reader.onload = function(e) {
              preview.src = e.target.result;
              preview.style.display = 'block';
            };

            reader.readAsDataURL(file);
          } else {
            preview.src = '';
            preview.style.display = 'none';
          }
        });
      }

      // Função para gerenciar abas
      function openTab(tabName) {
        const tabContents = document.getElementsByClassName('tab-content');
        for (let i = 0; i < tabContents.length; i++) {
          tabContents[i].style.display = 'none';
        }

        const tabLinks = document.getElementsByClassName('tab-link');
        for (let i = 0; i < tabLinks.length; i++) {
          tabLinks[i].classList.remove('active');
        }

        document.getElementById(tabName).style.display = 'block';
        document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
      }

      // Adicionar event listeners para as abas
      const tabLinks = document.getElementsByClassName('tab-link');
      for (let i = 0; i < tabLinks.length; i++) {
        tabLinks[i].addEventListener('click', function() {
          openTab(this.getAttribute('data-tab'));
        });
      }

      // Configurar seletor múltiplo de países
      const countryList = document.getElementById('countryList');
      const countrySearch = document.getElementById('countrySearch');
      const selectedCountries = document.getElementById('selectedCountries');
      const selectedCountriesData = document.getElementById('selectedCountriesData');
      
      // Array para armazenar os países selecionados
      const selectedCountriesArray = [];

      // Popular a lista de países
      if (countryList && typeof countries !== 'undefined') {
        // Limpar a lista atual
        countryList.innerHTML = '';
        
        // Adicionar cada país à lista
        Object.keys(countries).forEach(code => {
          const country = countries[code];
          const listItem = document.createElement('li');
          listItem.dataset.code = code;
          listItem.dataset.name = country.name;
          
          // Adicionar bandeira e nome do país
          listItem.innerHTML = `
            <span class="country-flag">${country.flag}</span>
            <span>${country.name}</span>
          `;
          
          // Adicionar evento de clique
          listItem.addEventListener('click', function() {
            const countryCode = this.dataset.code;
            const countryName = this.dataset.name;
            const countryFlag = country.flag;
            
            // Verificar se o país já está selecionado
            if (!selectedCountriesArray.some(c => c.code === countryCode)) {
              // Adicionar ao array
              selectedCountriesArray.push({
                code: countryCode,
                name: countryName,
                flag: countryFlag
              });
              
              // Atualizar o hidden input
              selectedCountriesData.value = JSON.stringify(selectedCountriesArray);
              
              // Adicionar badge à área de países selecionados
              addCountryBadge(countryCode, countryName, countryFlag);
            }
            
            // Limpar a pesquisa
            countrySearch.value = '';
            filterCountries('');
          });
          
          countryList.appendChild(listItem);
        });
      }

      // Função para adicionar badge de país
      function addCountryBadge(code, name, flag) {
        const badge = document.createElement('div');
        badge.className = 'country-badge';
        badge.dataset.code = code;
        
        badge.innerHTML = `
          <span class="country-flag">${flag}</span>
          <span>${name}</span>
          <span class="badge-remove" data-code="${code}">&times;</span>
        `;
        
        // Adicionar evento para remover o país
        const removeButton = badge.querySelector('.badge-remove');
        removeButton.addEventListener('click', function(e) {
          const countryCode = this.dataset.code;
          
          // Remover do array
          const index = selectedCountriesArray.findIndex(c => c.code === countryCode);
          if (index !== -1) {
            selectedCountriesArray.splice(index, 1);
          }
          
          // Atualizar o hidden input
          selectedCountriesData.value = JSON.stringify(selectedCountriesArray);
          
          // Remover o badge
          badge.remove();
          
          e.stopPropagation();
        });
        
        selectedCountries.appendChild(badge);
      }

      // Eventos para a busca de países
      if (countrySearch) {
        countrySearch.addEventListener('input', function() {
          filterCountries(this.value.toLowerCase());
        });
        
        countrySearch.addEventListener('focus', function() {
          countryList.style.display = 'block';
        });
      }
      
      // Função para filtrar países
      function filterCountries(searchValue) {
        const items = countryList.getElementsByTagName('li');
        
        for (let i = 0; i < items.length; i++) {
          const countryName = items[i].dataset.name.toLowerCase();
          if (countryName.includes(searchValue)) {
            items[i].style.display = '';
          } else {
            items[i].style.display = 'none';
          }
        }
      }
      
      // Clicar fora da lista de países para fechar
      document.addEventListener('click', function(e) {
        if (e.target !== countrySearch && 
            !countryList.contains(e.target)) {
          countryList.style.display = 'none';
        } else {
          countryList.style.display = 'block';
        }
      });

      // ===== Bookmaker Account Settings =====
      
      // Gerenciar Bookmaker Account Settings
      const addAccountButton = document.getElementById('addAccountButton');
      const accountDetailsSection = document.getElementById('accountDetailsSection');
      const savedAccountsSection = document.getElementById('savedAccountsSection');
      const addMoreAccountButton = document.getElementById('addMoreAccountButton');
      const saveAccountButton = document.getElementById('saveAccountButton');
      const accountsList = document.getElementById('accountsList');
      const savedAccountsData = document.getElementById('savedAccountsData');
      const associatedGeographies = document.getElementById('associatedGeographies');
      const selectedGeographiesDisplay = document.getElementById('selectedGeographiesDisplay');
      
      // Array para armazenar as contas salvas
      const savedAccounts = [];

      // Carregar owners no dropdown
      fetch('/api/owners')
        .then(response => response.json())
        .then(owners => {
          const ownerSelect = document.getElementById('ownerSelect');
          // Limpar opções existentes
          ownerSelect.innerHTML = '<option value="">Select an Owner</option>';
          
          // Adicionar owners ao dropdown
          owners.forEach(owner => {
            const option = document.createElement('option');
            option.value = owner.id;
            option.textContent = owner.nome;
            ownerSelect.appendChild(option);
          });
        })
        .catch(error => {
          console.error('Erro ao carregar owners:', error);
        });

      // Função para adicionar card da conta
      function addAccountCard(account) {
        const card = document.createElement('div');
        card.className = 'account-card';
        
        let cardContent = `
          <h5>${account.ownerName}</h5>
          <p><strong>Status:</strong> ${account.status}</p>
          <p><strong>Username:</strong> ${account.username}</p>
          <p><strong>Password:</strong> ${account.password.replace(/./g, '*')}</p>
          <p><strong>Associated Geographies:</strong></p>
          <div class="account-geographies">`;
        
        // Adicionar badges para os países associados
        if (account.geographies && account.geographies.length > 0) {
          account.geographies.forEach(geo => {
            cardContent += `
              <span class="geo-badge">
                <span class="country-flag">${geo.flag}</span>
                <span>${geo.name}</span>
              </span>`;
          });
        } else {
          cardContent += `<span>None</span>`;
        }
        
        cardContent += `</div>`;
        
        card.innerHTML = cardContent;
        accountsList.appendChild(card);
      }

      // Event listener para o botão Add Account
      if (addAccountButton) {
        addAccountButton.addEventListener('click', function() {
          accountDetailsSection.style.display = 'block';
          
          // Atualizar a lista de geografias associadas disponíveis
          updateAssociatedGeographiesSelection();
        });
      }

      // Função para atualizar a seleção de geografias associadas
      function updateAssociatedGeographiesSelection() {
        // Limpar seleção atual
        associatedGeographies.innerHTML = '';
        selectedGeographiesDisplay.innerHTML = '';
        
        // Se não houver países selecionados, mostrar mensagem
        if (selectedCountriesArray.length === 0) {
          selectedGeographiesDisplay.innerHTML = '<p>No geographies selected in Bookmaker Settings</p>';
          return;
        }
        
        // Adicionar os países selecionados como opções
        selectedCountriesArray.forEach(country => {
          // Adicionar ao select (oculto)
          const option = document.createElement('option');
          option.value = country.code;
          option.textContent = country.name;
          option.dataset.flag = country.flag;
          associatedGeographies.appendChild(option);
          
          // Adicionar badge visual
          const badge = document.createElement('div');
          badge.className = 'country-badge selectable';
          badge.dataset.code = country.code;
          badge.dataset.selected = 'false';
          
          badge.innerHTML = `
            <span class="country-flag">${country.flag}</span>
            <span>${country.name}</span>
          `;
          
          badge.addEventListener('click', function() {
            const isSelected = this.dataset.selected === 'true';
            
            if (isSelected) {
              this.dataset.selected = 'false';
              this.classList.remove('selected');
              
              // Desmarcar a opção correspondente
              const option = associatedGeographies.querySelector(`option[value="${country.code}"]`);
              if (option) option.selected = false;
            } else {
              this.dataset.selected = 'true';
              this.classList.add('selected');
              
              // Marcar a opção correspondente
              const option = associatedGeographies.querySelector(`option[value="${country.code}"]`);
              if (option) option.selected = true;
            }
          });
          
          selectedGeographiesDisplay.appendChild(badge);
        });
      }

      // Event listener para o botão Save Account
      if (saveAccountButton) {
        saveAccountButton.addEventListener('click', function() {
          const ownerSelect = document.getElementById('ownerSelect');
          const accountStatus = document.getElementById('accountStatus');
          const accountUsername = document.getElementById('accountUsername');
          const accountPassword = document.getElementById('accountPassword');
          
          // Validar campos obrigatórios
          if (!ownerSelect.value) {
            alert('Please select an owner');
            return;
          }
          
          if (!accountUsername.value) {
            alert('Please enter a username/email');
            return;
          }
          
          if (!accountPassword.value) {
            alert('Please enter a password');
            return;
          }
          
          // Obter geografias selecionadas
          const selectedGeos = [];
          const geoBadges = selectedGeographiesDisplay.querySelectorAll('.country-badge.selected');
          
          geoBadges.forEach(badge => {
            const code = badge.dataset.code;
            const country = selectedCountriesArray.find(c => c.code === code);
            if (country) {
              selectedGeos.push(country);
            }
          });
          
          // Criar objeto da conta
          const accountData = {
            ownerId: ownerSelect.value,
            ownerName: ownerSelect.options[ownerSelect.selectedIndex].text,
            status: accountStatus.value,
            username: accountUsername.value,
            password: accountPassword.value,
            geographies: selectedGeos
          };
          
          // Adicionar ao array de contas
          savedAccounts.push(accountData);
          
          // Atualizar o input hidden com os dados das contas
          savedAccountsData.value = JSON.stringify(savedAccounts);
          
          // Mostrar a seção de contas salvas
          savedAccountsSection.style.display = 'block';
          
          // Adicionar card visual para a conta
          addAccountCard(accountData);
          
          // Limpar formulário
          ownerSelect.selectedIndex = 0;
          accountStatus.selectedIndex = 0;
          accountUsername.value = '';
          accountPassword.value = '';
          
          // Limpar seleção de geografias
          const allGeoBadges = selectedGeographiesDisplay.querySelectorAll('.country-badge');
          allGeoBadges.forEach(badge => {
            badge.dataset.selected = 'false';
            badge.classList.remove('selected');
          });
          
          // Esconder seção de detalhes da conta
          accountDetailsSection.style.display = 'none';
          
          alert('Account details saved!');
        });
      }
      
      // Event listener para o botão Add More Account
      if (addMoreAccountButton) {
        addMoreAccountButton.addEventListener('click', function() {
          // Mostrar seção de detalhes da conta para adicionar outra
          accountDetailsSection.style.display = 'block';
          
          // Atualizar a lista de geografias associadas disponíveis
          updateAssociatedGeographiesSelection();
        });
      }
    });
  </script>
</body>
</html>
