
<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Adicionar Grupo - CRM</title>
  <link rel="stylesheet" href="/css/styles.css">
  <link rel="stylesheet" href="/css/tabs.css">
</head>
<body>
  <div class="dashboard-container">
    <header class="main-header">
      <div class="logo">
        <h1>CRM Sistema</h1>
      </div>
      <div class="user-info">
        <span>Bem-vindo, <%= usuario.nome %></span>
        <a href="/logout" class="btn btn-small">Sair</a>
      </div>
    </header>

    <div class="dashboard-content">
      <aside class="sidebar">
        <nav>
          <ul>
            <li><a href="/dashboard">Dashboard</a></li>
            <li class="active"><a href="/bookmakers">Bookmakers</a></li>
            <li><a href="/users">Users</a></li>
          </ul>
        </nav>
      </aside>

      <main class="main-content">
        <div class="page-header">
          <h2>Adicionar Grupo</h2>
        </div>

        <% if (erro) { %>
          <div class="alert alert-danger">
            <%= erro %>
          </div>
        <% } %>

        <div class="form-container">
          <!-- Tab links -->
          <div class="tab">
            <button class="tab-link active" data-tab="groupSettings">Group Settings</button>
            <button class="tab-link" data-tab="groupAccountSettings">Group Account Settings</button>
            <button class="tab-link" data-tab="groupBillingSettings">Group Billing Settings</button>
          </div>

          <form action="/bookmakers/adicionar-grupo" method="POST" enctype="multipart/form-data">
            <!-- Tab content -->
            <div id="groupSettings" class="tab-content" style="display:block;">
              <div class="form-group">
                <label for="status">Group Status:</label>
                <select id="status" name="status">
                  <option value="active">Active</option>
                  <option value="inactive">Inactive</option>
                  <option value="suspended">Suspended</option>
                </select>
              </div>

              <div class="form-group">
                <label for="nome">Group Name:</label>
                <input type="text" id="nome" name="nome" required>
              </div>

              <div class="form-group">
                <label for="groupLogo">Group Logo:</label>
                <input type="file" id="groupLogo" name="groupLogo" accept="image/*">
                <div class="logo-preview-container">
                  <img id="logoPreview" class="logo-preview" src="#" alt="Logo Preview">
                </div>
              </div>

              <div class="form-group">
                <label for="groupUrl">Group URL:</label>
                <input type="url" id="groupUrl" name="groupUrl">
              </div>

              <div class="form-group">
                <label for="groupAffiliateUrl">Group Affiliate URL:</label>
                <input type="url" id="groupAffiliateUrl" name="groupAffiliateUrl">
              </div>
            </div>

            <!-- Tab content for Group Account Settings -->
            <div id="groupAccountSettings" class="tab-content">
              <div class="form-group">
                <label>Apply Account Settings by Group?</label>
                <div class="radio-group">
                  <div class="radio-option">
                    <input type="radio" id="applyAccountYes" name="applyAccount" value="yes">
                    <label for="applyAccountYes">Yes</label>
                  </div>
                  <div class="radio-option">
                    <input type="radio" id="applyAccountNo" name="applyAccount" value="no" checked>
                    <label for="applyAccountNo">No</label>
                  </div>
                </div>
              </div>

              <!-- Botão para adicionar conta -->
              <div id="addAccountButtonSection" style="display: none;">
                <button type="button" id="addAccountButton" class="btn btn-success">Add Account</button>
              </div>

              <!-- Seção de detalhes da conta -->
              <div id="accountDetailsSection" style="display: none;">
                <h4>Account Details</h4>
                
                <div class="form-group">
                  <label for="ownerSelect">Owner:</label>
                  <select id="ownerSelect" name="ownerSelect">
                    <option value="">Select an Owner</option>
                  </select>
                </div>

                <div class="form-group">
                  <label for="accountStatus">Account Status:</label>
                  <select id="accountStatus" name="accountStatus">
                    <option value="active">Active</option>
                    <option value="inactive">Inactive</option>
                    <option value="suspended">Suspended</option>
                  </select>
                </div>

                <div class="form-group">
                  <label for="accountUsername">Username/Email:</label>
                  <input type="text" id="accountUsername" name="accountUsername">
                </div>

                <div class="form-group">
                  <label for="accountPassword">Password:</label>
                  <input type="password" id="accountPassword" name="accountPassword">
                </div>

                <div class="form-actions billing-actions">
                  <button type="button" id="saveAccountButton" class="btn btn-success">Save Account</button>
                </div>
              </div>

              <!-- Seção para exibir as contas salvas -->
              <div id="savedAccountsSection" class="saved-accounts-section">
                <h4>Saved Accounts</h4>
                <div id="accountsList" class="accounts-list"></div>
                <button type="button" id="addMoreAccountButton" class="btn btn-info">Add Another Account</button>
              </div>

              <!-- Input hidden para armazenar os dados das contas em formato JSON -->
              <input type="hidden" id="savedAccountsData" name="savedAccountsData">
            </div>

            <!-- Tab content for Group Billing Settings -->
            <div id="groupBillingSettings" class="tab-content">
              <div class="form-group">
                <label>Apply Billing Settings by Group?</label>
                <div class="radio-group">
                  <div class="radio-option">
                    <input type="radio" id="applyBillingYes" name="applyBilling" value="yes">
                    <label for="applyBillingYes">Yes</label>
                  </div>
                  <div class="radio-option">
                    <input type="radio" id="applyBillingNo" name="applyBilling" value="no" checked>
                    <label for="applyBillingNo">No</label>
                  </div>
                </div>
              </div>

              <!-- Botão para adicionar detalhes de faturamento -->
              <div id="addBillingDetailsButtonSection" style="display: none;">
                <button type="button" id="addBillingDetailsButton" class="btn btn-success">Add Billing Details</button>
              </div>

              <!-- Seção de detalhes de faturamento -->
              <div id="billingDetailsSection" style="display: none;">
                <h4>Billing Details</h4>
                
                <div class="form-group">
                  <label for="billingName">Name:</label>
                  <input type="text" id="billingName" name="billingName">
                </div>

                <div class="form-group">
                  <label for="billingVat">VAT:</label>
                  <input type="text" id="billingVat" name="billingVat">
                </div>

                <div class="form-group">
                  <label for="billingAddress1">Address 1:</label>
                  <input type="text" id="billingAddress1" name="billingAddress1">
                </div>

                <div class="form-group">
                  <label for="billingAddress2">Address 2:</label>
                  <input type="text" id="billingAddress2" name="billingAddress2">
                </div>

                <div class="form-group">
                  <label for="billingCity">City:</label>
                  <input type="text" id="billingCity" name="billingCity">
                </div>

                <div class="form-group">
                  <label for="billingState">State/Province/Region:</label>
                  <input type="text" id="billingState" name="billingState">
                </div>

                <div class="form-group">
                  <label for="billingZipCode">Zip-Code:</label>
                  <input type="text" id="billingZipCode" name="billingZipCode">
                </div>

                <div class="form-group">
                  <label for="countrySelector">Country:</label>
                  <div class="country-selector">
                    <div class="selected-country" id="selectedCountry">Select a country</div>
                    <input type="text" id="countrySearch" class="country-search" placeholder="Search countries...">
                    <input type="hidden" id="countryCode" name="countryCode">
                    <ul id="countryList" class="country-list"></ul>
                  </div>
                </div>

                <div class="form-actions billing-actions">
                  <button type="button" id="saveBillingButton" class="btn btn-success">Save Billing Details</button>
                </div>
              </div>

              <!-- Seção para exibir os detalhes de faturamento salvos -->
              <div id="savedBillingAccounts" class="saved-accounts-section" style="display: none;">
                <h4>Saved Billing Details</h4>
                <div id="billingAccountsList" class="accounts-list"></div>
                <input type="hidden" id="billingAccountsData" name="billingAccountsData">
                <button type="button" id="addMoreBillingButton" class="btn btn-info">Add Another Billing Details</button>
              </div>
            </div>

            <div class="form-actions">
              <a href="/bookmakers" class="btn btn-secondary">Cancelar</a>
              <button type="submit" class="btn btn-primary">Salvar</button>
            </div>
          </form>
        </div>
      </main>
    </div>
  </div>

  <script src="/js/countries.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Preview da imagem do logo
      const logoInput = document.getElementById('groupLogo');
      const logoPreview = document.getElementById('logoPreview');
      
      if (logoInput) {
        logoInput.addEventListener('change', function() {
          const file = this.files[0];
          const preview = document.getElementById('logoPreview');

          if (file) {
            const reader = new FileReader();

            reader.onload = function(e) {
              preview.src = e.target.result;
              preview.style.display = 'block';
            };

            reader.readAsDataURL(file);
          } else {
            preview.src = '';
            preview.style.display = 'none';
          }
        });
      }

      // Função para gerenciar abas
      function openTab(tabName) {
        const tabContents = document.getElementsByClassName('tab-content');
        for (let i = 0; i < tabContents.length; i++) {
          tabContents[i].style.display = 'none';
        }

        const tabLinks = document.getElementsByClassName('tab-link');
        for (let i = 0; i < tabLinks.length; i++) {
          tabLinks[i].classList.remove('active');
        }

        document.getElementById(tabName).style.display = 'block';
        document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
      }

      // Adicionar event listeners para as abas
      const tabLinks = document.getElementsByClassName('tab-link');
      for (let i = 0; i < tabLinks.length; i++) {
        tabLinks[i].addEventListener('click', function() {
          openTab(this.getAttribute('data-tab'));
        });
      }

      // Gerenciar Group Account Settings
      const accountRadios = document.querySelectorAll('input[name="applyAccount"]');
      const addAccountButtonSection = document.getElementById('addAccountButtonSection');
      const accountDetailsSection = document.getElementById('accountDetailsSection');
      const savedAccountsSection = document.getElementById('savedAccountsSection');
      const addAccountButton = document.getElementById('addAccountButton');
      const addMoreAccountButton = document.getElementById('addMoreAccountButton');
      const saveAccountButton = document.getElementById('saveAccountButton');
      const accountsList = document.getElementById('accountsList');
      const savedAccountsData = document.getElementById('savedAccountsData');
      
      // Array para armazenar as contas salvas
      const savedAccounts = [];

      // Função para adicionar card da conta
      function addAccountCard(account) {
        const card = document.createElement('div');
        card.className = 'account-card';
        
        let cardContent = `
          <h5>${account.owner}</h5>
          <p><strong>Status:</strong> ${account.status}</p>
          <p><strong>Username:</strong> ${account.username}</p>
          <p><strong>Password:</strong> ${account.password.replace(/./g, '*')}</p>
        `;
        
        card.innerHTML = cardContent;
        accountsList.appendChild(card);
      }

      // Event listeners para os radio buttons
      if (accountRadios.length > 0) {
        accountRadios.forEach(radio => {
          radio.addEventListener('change', function() {
            if (this.value === 'yes') {
              addAccountButtonSection.style.display = 'block';
              
              // Carregar os owners do servidor
              fetch('/api/owners')
                .then(response => response.json())
                .then(owners => {
                  const ownerSelect = document.getElementById('ownerSelect');
                  // Limpar opções existentes
                  ownerSelect.innerHTML = '<option value="">Select an Owner</option>';
                  
                  // Adicionar owners ao dropdown
                  owners.forEach(owner => {
                    const option = document.createElement('option');
                    option.value = owner.id;
                    option.textContent = owner.nome;
                    ownerSelect.appendChild(option);
                  });
                })
                .catch(error => {
                  console.error('Erro ao carregar owners:', error);
                  // Adicionar alguns owners fictícios para demonstração em caso de erro
                  const ownerSelect = document.getElementById('ownerSelect');
                  ownerSelect.innerHTML = `
                    <option value="">Select an Owner</option>
                    <option value="1">Owner 1</option>
                    <option value="2">Owner 2</option>
                    <option value="3">Owner 3</option>
                  `;
                });
            } else {
              // Se selecionar "No", esconder todas as seções relacionadas
              addAccountButtonSection.style.display = 'none';
              accountDetailsSection.style.display = 'none';
              savedAccountsSection.style.display = 'none';
              
              // Limpar as contas salvas
              savedAccounts.length = 0;
              accountsList.innerHTML = '';
              savedAccountsData.value = '';
            }
          });
        });
      }

      // Event listener para o botão Add Account
      if (addAccountButton) {
        addAccountButton.addEventListener('click', function() {
          accountDetailsSection.style.display = 'block';
        });
      }

      // Event listener para o botão Save Account
      if (saveAccountButton) {
        saveAccountButton.addEventListener('click', function() {
          const ownerSelect = document.getElementById('ownerSelect');
          const accountStatus = document.getElementById('accountStatus');
          const accountUsername = document.getElementById('accountUsername');
          const accountPassword = document.getElementById('accountPassword');
          
          // Validar campos obrigatórios
          if (!ownerSelect.value) {
            alert('Please select an owner');
            return;
          }
          
          if (!accountUsername.value) {
            alert('Please enter a username/email');
            return;
          }
          
          if (!accountPassword.value) {
            alert('Please enter a password');
            return;
          }
          
          // Criar objeto da conta
          const accountData = {
            ownerId: ownerSelect.value,
            owner: ownerSelect.options[ownerSelect.selectedIndex].text,
            status: accountStatus.value,
            username: accountUsername.value,
            password: accountPassword.value
          };
          
          // Adicionar ao array de contas
          savedAccounts.push(accountData);
          
          // Atualizar o input hidden com os dados das contas
          savedAccountsData.value = JSON.stringify(savedAccounts);
          
          // Mostrar a seção de contas salvas
          savedAccountsSection.style.display = 'block';
          
          // Adicionar card visual para a conta
          addAccountCard(accountData);
          
          // Limpar formulário
          ownerSelect.selectedIndex = 0;
          accountStatus.selectedIndex = 0;
          accountUsername.value = '';
          accountPassword.value = '';
          
          // Esconder seção de detalhes da conta
          accountDetailsSection.style.display = 'none';
          
          alert('Account details saved!');
        });
      }
      
      // Event listener para o botão Add More Account
      if (addMoreAccountButton) {
        addMoreAccountButton.addEventListener('click', function() {
          // Mostrar seção de detalhes da conta para adicionar outra
          accountDetailsSection.style.display = 'block';
        });
      }

      // Gerenciar Group Billing Settings
      // Array para armazenar contas de faturamento
      const billingAccounts = [];
      const billingRadios = document.querySelectorAll('input[name="applyBilling"]');
      const addBillingButtonSection = document.getElementById('addBillingDetailsButtonSection');
      const billingDetailsSection = document.getElementById('billingDetailsSection');
      const savedBillingAccounts = document.getElementById('savedBillingAccounts');
      const addBillingButton = document.getElementById('addBillingDetailsButton');
      const saveBillingButton = document.getElementById('saveBillingButton');
      const addMoreBillingButton = document.getElementById('addMoreBillingButton');
      const billingAccountsList = document.getElementById('billingAccountsList');
      const billingAccountsData = document.getElementById('billingAccountsData');

      // Inicializar o seletor de países
      const countryList = document.getElementById('countryList');
      const selectedCountryDisplay = document.getElementById('selectedCountry');
      const countrySearchInput = document.getElementById('countrySearch');
      const countryCodeInput = document.getElementById('countryCode');

      // Preencher a lista de países
      if (countryList && window.countries) {
        window.countries.forEach(country => {
          const item = document.createElement('li');
          item.setAttribute('data-code', country.code);
          item.setAttribute('data-name', country.name);
          item.innerHTML = `<span class="country-flag">${country.emoji}</span> ${country.name}`;
          
          item.addEventListener('click', function() {
            selectedCountryDisplay.innerHTML = `<span class="country-flag">${country.emoji}</span> ${country.name}`;
            countryCodeInput.value = country.code;
            countryList.style.display = 'none';
          });
          
          countryList.appendChild(item);
        });
      }

      // Função para adicionar card de conta de faturamento
      function addBillingCard(account) {
        const card = document.createElement('div');
        card.className = 'billing-account-card';
        
        let cardContent = `
          <h3>${account.name}</h3>
          <p><strong>VAT:</strong> ${account.vat || 'N/A'}</p>
          <p><strong>Address:</strong> ${account.address1 || 'N/A'}</p>
          ${account.address2 ? `<p>${account.address2}</p>` : ''}
          <p><strong>City:</strong> ${account.city || 'N/A'}, ${account.state || ''} ${account.zipCode || ''}</p>
          <p><strong>Country:</strong> ${account.country || 'N/A'}</p>
        `;
        
        card.innerHTML = cardContent;
        billingAccountsList.appendChild(card);
      }

      // Event listeners para os radio buttons de billing
      if (billingRadios.length > 0) {
        billingRadios.forEach(radio => {
          radio.addEventListener('change', function() {
            if (this.value === 'yes') {
              addBillingButtonSection.style.display = 'block';
              // Manter a seção de contas salvas visível, se existirem contas
              if (billingAccounts.length > 0) {
                savedBillingAccounts.style.display = 'block';
              }
            } else {
              addBillingButtonSection.style.display = 'none';
              billingDetailsSection.style.display = 'none';
              savedBillingAccounts.style.display = 'none';
              
              // Limpar as contas de faturamento
              billingAccounts.length = 0;
              if (billingAccountsList) {
                billingAccountsList.innerHTML = '';
              }
              if (billingAccountsData) {
                billingAccountsData.value = '';
              }
            }
          });
        });
      }

      // Event listener para o botão Add Billing Details
      if (addBillingButton) {
        addBillingButton.addEventListener('click', function() {
          billingDetailsSection.style.display = 'block';
        });
      }

      // Event listener para o botão Save Billing Details
      if (saveBillingButton) {
        saveBillingButton.addEventListener('click', function() {
          const billingName = document.getElementById('billingName').value;
          const billingVat = document.getElementById('billingVat').value;
          const billingAddress1 = document.getElementById('billingAddress1').value;
          const billingAddress2 = document.getElementById('billingAddress2').value;
          const billingCity = document.getElementById('billingCity').value;
          const billingState = document.getElementById('billingState').value;
          const billingZipCode = document.getElementById('billingZipCode').value;
          const countryDisplay = document.getElementById('selectedCountry');
          const countryCode = document.getElementById('countryCode').value;
          
          // Obter o texto do país selecionado
          let selectedCountryText = countryDisplay.textContent.trim();
          if (selectedCountryText === 'Select a country') {
            selectedCountryText = '';
          }
          
          // Validar campo obrigatório
          if (!billingName) {
            alert('Please enter a billing name');
            return;
          }
          
          // Criar objeto da conta de faturamento
          const billingData = {
            name: billingName,
            vat: billingVat,
            address1: billingAddress1,
            address2: billingAddress2,
            city: billingCity,
            state: billingState,
            zipCode: billingZipCode,
            country: selectedCountryText,
            countryCode: countryCode
          };
          
          // Adicionar ao array de contas de faturamento
          billingAccounts.push(billingData);
          
          // Atualizar o input hidden com os dados das contas
          if (billingAccountsData) {
            billingAccountsData.value = JSON.stringify(billingAccounts);
            console.log("Enviando billing accounts:", billingAccounts);
          }
          
          // Mostrar a seção de contas salvas
          if (savedBillingAccounts) {
            savedBillingAccounts.style.display = 'block';
          }
          
          // Adicionar card visual para a conta
          if (billingAccountsList) {
            addBillingCard(billingData);
          }
          
          // Limpar formulário
          document.getElementById('billingName').value = '';
          document.getElementById('billingVat').value = '';
          document.getElementById('billingAddress1').value = '';
          document.getElementById('billingAddress2').value = '';
          document.getElementById('billingCity').value = '';
          document.getElementById('billingState').value = '';
          document.getElementById('billingZipCode').value = '';
          document.getElementById('selectedCountry').textContent = 'Select a country';
          document.getElementById('countryCode').value = '';
          
          // Esconder seção de detalhes de faturamento
          billingDetailsSection.style.display = 'none';
          
          alert('Billing details saved!');
        });
      }
      
      // Event listener para o botão Add More Billing
      if (addMoreBillingButton) {
        addMoreBillingButton.addEventListener('click', function() {
          // Mostrar seção de detalhes de faturamento para adicionar outra
          billingDetailsSection.style.display = 'block';
        });
      }

      // Configurar eventos do seletor de países
      if (countryList && countrySearchInput && selectedCountryDisplay) {
        // Mostrar a lista quando clica no display do país
        selectedCountryDisplay.addEventListener('click', function() {
          countryList.style.display = 'block';
        });
        
        // Mostrar a lista quando clica no input de pesquisa
        countrySearchInput.addEventListener('click', function() {
          countryList.style.display = 'block';
        });
        
        // Filtrar a lista ao digitar
        countrySearchInput.addEventListener('input', function() {
          const searchValue = this.value.toLowerCase();
          const items = countryList.getElementsByTagName('li');
          
          for (let i = 0; i < items.length; i++) {
            const countryName = items[i].getAttribute('data-name').toLowerCase();
            if (countryName.indexOf(searchValue) > -1) {
              items[i].style.display = "";
            } else {
              items[i].style.display = "none";
            }
          }
        });
        
        // Fechar a lista quando clica fora
        document.addEventListener('click', function(e) {
          if (e.target !== countrySearchInput && 
              e.target !== selectedCountryDisplay && 
              !countryList.contains(e.target)) {
            countryList.style.display = 'none';
          }
        });
      }
    });
  </script>
</body>
</html>
